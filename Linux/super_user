#!/bin/bash
source $(pwd)/variables

if [ "$EUID" -ne 0 ]; then
    exit 1
else
    system() {
        cd $REPO_DIR || return
        [ ! -d /Os_H ] && mkdir -p /Os_H

        repo_setup() {
            cd repo || return
            cp * /etc/yum.repos.d/                                                          # google-chrome.repo fedora_repositories.repo microsoft-edge.repo vscode.repo yandex-browser.repo
            rm -rf /etc/yum.repos.d/yandex-browser.repo /etc/yum.repos.d/google-chrome.repo # /etc/yum.repos.d/microsoft-edge.repo
            cd $REPO_DIR || return
        }

        packages() {
            dnf install podman gnome-session-xsession xapps gnome-terminal gnome-terminal-nautilus gnome-shell git nautilus gnome-disk-utility gnome-browser-connector gnome-system-monitor gdm git ibus-m17n jq zsh msr-tools conky dbus-x11 -y # eza fzf cockpit pam_yubico gparted libXScrnSaver bleachbit keepassxc rclone xcb-util-keysyms xcb-util-renderutil baobab
            dnf group install "hardware-support" "networkmanager-submodules" -y                                                                                                                                                                  # "firefox"
            dnf upgrade -y
            systemctl set-default graphical.target
            sh system/cmd/rmkernel
        }

        shell() {
            chsh -s /bin/zsh $user_current
        }

        run() {
            repo_setup
            packages
            shell
        }

        grep -q "clean_requirements_on_remove=1" /etc/dnf/dnf.conf || echo -e "directive clean_requirements_on_remove=1" >>/etc/dnf/dnf.conf
        find "$REPO_DIR" -type f -print0 | xargs -0 dos2unix --
        run >>$REPO_DIR/logs/system.log 2>&1
        cd $REPO_DIR || return
    }

    softwares() {
        cd $REPO_DIR || return
        packages_repo() {
            dnf install code microsoft-edge-stable -y # yandex-browser-stable google-chrome-stable
            cd $REPO_DIR || return
        }
        gcm() {
            mkdir -p $REPO_DIR/gcm_install
            cd $REPO_DIR/gcm_install
            gcm_install() {
                curl -s https://api.github.com/repos/ldennington/git-credential-manager/releases/latest |
                    grep -E 'browser_download_url.*gcm-linux.*[0-9].[0-9].[0-9].tar.gz' |
                    cut -d : -f 2,3 |
                    tr -d \" |
                    xargs -I 'url' curl -LO 'url'
                gcm_file=$(ls gcm*.tar.gz)
                tar -xvf $gcm_file -C /usr/local/bin
                /usr/local/bin/git-credential-manager configure
            }
            if [ command -v git-credential-manager ] &>/dev/null; then
                /usr/local/bin/git-credential-manager unconfigure
                rm -rf $(command -v git-credential-manager)
                gcm_install
            else
                gcm_install
            fi
            git config --global credential.credentialStore secretservice
        }
        packages_repo
        gcm
        cd $REPO_DIR || return
        rm -rf gcm_install
    }

    bootloader() {
        cd "$REPO_DIR" || return
        [ ! -d /boot/grub2/themes ] && mkdir -p /boot/grub2/themes
        rm -rf /boot/grub2/themes/*
        cp -f bootloader/30_uefi-firmware /etc/grub.d && chmod 755 /etc/grub.d/30_uefi-firmware
        cp -r bootloader/dedsec /boot/grub2/themes
        sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=99/; s/^\(GRUB_TERMINAL\w*=.*\)/#\1; /g' /etc/default/grub
        grep -q "/boot/grub2/themes/dedsec/theme.txt" /etc/default/grub || echo "GRUB_THEME=\"/boot/grub2/themes/dedsec/theme.txt\"" >>/etc/default/grub
        if ! grep -q "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" /etc/default/grub; then
            sh -c 'echo -e "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" >> /etc/default/grub'
        fi
        grub2-mkconfig -o /boot/grub2/grub.cfg
        cd "$REPO_DIR" || return
    }

    themes() {
        
    }

    icons() {
        cd "$REPO_DIR" || return
        mkdir -p icons_custom
        cd icons_custom
        mkdir -p WhiteSur-icon-theme && curl -L $(curl -s https://api.github.com/repos/vinceliuice/WhiteSur-icon-theme/releases/latest | grep "tarball" | cut -d '"' -f 4) | tar -xz -C WhiteSur-icon-theme --strip-components=1
        rm -rf /usr/share/icons/fedora_icons
        cd WhiteSur-icon-theme
        ./install.sh -n 'fedora_icons' -t default -a -b
        cd /usr/share/icons
        rm -rf fedora_icons-{dark,light}
        cd "$REPO_DIR" || return
        rm -rf icons_custom
    }

    cursors() {
        cd "$REPO_DIR" || return
        mkdir -p cursors_custom
        cd cursors_custom
        wget $(curl -s https://api.github.com/repos/ful1e5/apple_cursor/releases/latest | grep "browser_download_url.*macOS.tar.xz" | cut -d '"' -f 4) && tar -xvf macOS.tar.xz
        rm -rf /usr/share/icons/fedora_cursors
        cp -r macOS /usr/share/icons/
        cd /usr/share/icons/
        mv macOS fedora_cursors
        cd "$REPO_DIR" || return
        rm -rf cursors_custom
    }

    fonts() {
        cd "$REPO_DIR" || return
        mkdir -p fonts_custom
        cd fonts_custom
        mkdir -p fira-code-nerd && wget $(curl -s https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | grep browser_download_url | grep "FiraCode*.tar.xz" | cut -d '"' -f 4) -O fira-code-nerd.tar.xz && tar -xvf fira-code-nerd.tar.xz -C fira-code-nerd
        cd fira-code-nerd
        mkdir -p /usr/share/fonts/fira-code-nerd-fonts
        cp FiraCodeNerdFontMono-SemiBold.ttf /usr/share/fonts/fira-code-nerd-fonts
        fc-cache -f -v
        dnf group install "fonts" -y
        cd "$REPO_DIR" || return
        # abattis-cantarell-fonts.noarch adobe-source-code-pro-fonts.noarch dejavu-sans-fonts.noarch dejavu-sans-mono-fonts.noarch dejavu-serif-fonts.noarch fontconfig.x86_64 fonts-filesystem.noarch google-droid-sans-fonts.noarch google-noto-fonts-common.noarch google-noto-sans-gurmukhi-fonts.noarch google-noto-sans-sinhala-vf-fonts.noarch jomolhari-fonts.noarch julietaula-montserrat-fonts.noarch khmer-os-system-fonts.noarch libXfont2.x86_64 liberation-fonts-common.noarch liberation-mono-fonts.noarch liberation-sans-fonts.noarch liberation-serif-fonts.noarch libfontenc.x86_64 lohit-assamese-fonts.noarch lohit-bengali-fonts.noarch lohit-devanagari-fonts.noarch lohit-gujarati-fonts.noarch lohit-kannada-fonts.noarch lohit-odia-fonts.noarch lohit-tamil-fonts.noarch lohit-telugu-fonts.noarch paktype-naskh-basic-fonts.noarch pt-sans-fonts.noarch sil-abyssinica-fonts.noarch sil-nuosu-fonts.noarch sil-padauk-fonts.noarch stix-fonts.noarch urw-base35-bookman-fonts.noarch urw-base35-c059-fonts.noarch urw-base35-d050000l-fonts.noarch urw-base35-fonts.noarch urw-base35-fonts-common.noarch urw-base35-gothic-fonts.noarch urw-base35-nimbus-mono-ps-fonts.noarch urw-base35-nimbus-roman-fonts.noarch urw-base35-nimbus-sans-fonts.noarch urw-base35-p052-fonts.noarch urw-base35-standard-symbols-ps-fonts.noarch urw-base35-z003-fonts.noarch google-noto-sans-fonts
        cd $REPO_DIR/
        rm -rf fonts_custom
    }

    gdms() {
        
    }

    

    cursor_editor() {
        
    }

    conky_setup() {
        # if [ ! -d /home/$user_current/.config/autostart ]; then
        #     mkdir -p /home/$user_current/.config/autostart
        #     chown -R $user_current:$user_current /home/$user_current/.config/autostart
        # fi
        cd "$REPO_DIR" || return
        cd system/conky_conf/
        rsync -av --exclude={conky1.conf,conky2.conf,conky3.conf,conky4.conf,conky5.conf,conky.desktop,conky.lua,conkyrc_conf_wayland,conkyrc_conf_xorg} * /Os_H
        # cp conky.desktop /home/$user_current/.config/autostart
        # chown -R $user_current:$user_current /home/$user_current/.config/autostart/conky.desktop
        if loginctl show-session $(loginctl list-sessions | grep $user_current | awk '{print $1}') -p Type | grep -q "wayland"; then
            cp conkyrc_conf_wayland /etc/conky/conky.conf
        elif loginctl show-session $(loginctl list-sessions | grep $user_current | awk '{print $1}') -p Type | grep -q "x11"; then
            cp conkyrc_conf_xorg /etc/conky/conky.conf
        fi
        cd "$REPO_DIR" || return
    }

    service() {
        cd "$REPO_DIR" || return
    }



    

    gnome_extensions() {

    }

    tasks=(
        "system"
        "softwares"
        "bootloader"
        "themes"
        "icons"
        "cursors"
        "fonts"
        "gdms"
        "conky_setup"
        "mount_windows_partition"
        "cursor_editor"
        "service"
        # "yubico"
        # "enpass_install"
        "gnome_extensions"
        "remove_packages"
    )

    for task in "${tasks[@]}"; do
        check_and_run "$task"
    done
    chmod -R 777 $REPO_DIR/logs
    systemctl restart cpu_power.service &>/dev/null
    systemctl restart cpu_voltage.service &>/dev/null

    local pam_files=(
        "/etc/pam.d/gdm-password"
        "/etc/pam.d/system-auth"
    )
    local pam_line="auth  sufficient  pam_u2f.so  authfile=/Os_H/Yubico_Auth  cue [cue_prompt=Tap the Yubikey to authenticate]"
    for pam_file in "${pam_files[@]}"; do
        if ! grep -qF "$pam_line" "$pam_file"; then
            sed -i "1s|^|$pam_line\n|" "$pam_file"
        fi
    done

fi
