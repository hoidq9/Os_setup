#!/bin/bash
source $(pwd)/variables

if [ "$EUID" -ne 0 ]; then
    exit 1
else
    system() {
        cd $REPO_DIR || return
        [ ! -d /Os_H ] && mkdir -p /Os_H

        repo_setup() {
            cd repo || return
            cp * /etc/yum.repos.d/ # google-chrome.repo fedora_repositories.repo microsoft-edge.repo vscode.repo yandex-browser.repo
            rm -rf /etc/yum.repos.d/yandex-browser.repo # /etc/yum.repos.d/microsoft-edge.repo /etc/yum.repos.d/google-chrome.repo
            cd $REPO_DIR || return
        }

        packages() {
            dnf install podman gnome-session-xsession xapps gnome-terminal gnome-terminal-nautilus gnome-shell git nautilus gnome-disk-utility gnome-browser-connector gnome-system-monitor gdm git ibus-m17n jq zsh msr-tools conky dbus-x11 -y # eza fzf cockpit pam_yubico gparted libXScrnSaver bleachbit keepassxc rclone xcb-util-keysyms xcb-util-renderutil baobab
            dnf group install "hardware-support" "networkmanager-submodules" -y                                                                                                                                                                                                           # "firefox"
            dnf upgrade -y
            systemctl set-default graphical.target
            sh system/cmd/rmkernel
        }

        shell() {
            chsh -s /bin/zsh $user_current
        }

        run() {
            repo_setup
            packages
            shell
        }

        grep -q "clean_requirements_on_remove=1" /etc/dnf/dnf.conf || echo -e "directive clean_requirements_on_remove=1" >>/etc/dnf/dnf.conf
        find "$REPO_DIR" -type f -print0 | xargs -0 dos2unix --
        run >>$REPO_DIR/logs/system.log 2>&1
        cd $REPO_DIR || return
    }

    softwares() {
        cd $REPO_DIR || return
        packages_repo() {
            dnf install code microsoft-edge-stable -y # yandex-browser-stable google-chrome-stable
            cd $REPO_DIR || return
        }
        gcm() {
            mkdir -p $REPO_DIR/gcm_install
            cd $REPO_DIR/gcm_install
            gcm_install() {
                curl -s https://api.github.com/repos/ldennington/git-credential-manager/releases/latest |
                    grep -E 'browser_download_url.*gcm-linux.*[0-9].[0-9].[0-9].tar.gz' |
                    cut -d : -f 2,3 |
                    tr -d \" |
                    xargs -I 'url' curl -LO 'url'
                gcm_file=$(ls gcm*.tar.gz)
                tar -xvf $gcm_file -C /usr/local/bin
                /usr/local/bin/git-credential-manager configure
            }
            if [ command -v git-credential-manager ] &>/dev/null; then
                /usr/local/bin/git-credential-manager unconfigure
                rm -rf $(command -v git-credential-manager)
                gcm_install
            else
                gcm_install
            fi
            git config --global credential.credentialStore secretservice
        }
        packages_repo
        gcm
        cd $REPO_DIR || return
        rm -rf gcm_install
    }

    bootloader() {
        cd "$REPO_DIR" || return
        [ ! -d /boot/grub2/themes ] && mkdir -p /boot/grub2/themes
        rm -rf /boot/grub2/themes/*
        cp -f bootloader/30_uefi-firmware /etc/grub.d && chmod 755 /etc/grub.d/30_uefi-firmware
        cp -r bootloader/dedsec /boot/grub2/themes
        sed -i 's/GRUB_TIMEOUT=5/GRUB_TIMEOUT=99/; s/^\(GRUB_TERMINAL\w*=.*\)/#\1; /g' /etc/default/grub
        grep -q "/boot/grub2/themes/dedsec/theme.txt" /etc/default/grub || echo "GRUB_THEME=\"/boot/grub2/themes/dedsec/theme.txt\"" >>/etc/default/grub
        if ! grep -q "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" /etc/default/grub; then
            sh -c 'echo -e "GRUB_FONT=/boot/grub2/fonts/unicode.pf2" >> /etc/default/grub'
        fi
        grub2-mkconfig -o /boot/grub2/grub.cfg
        cd "$REPO_DIR" || return
    }

    themes() {
        cd "$REPO_DIR" || return
        mkdir -p themes_custom
        cd themes_custom
        mkdir -p WhiteSur-gtk-theme && curl -L $(curl -s https://api.github.com/repos/vinceliuice/WhiteSur-gtk-theme/releases/latest | grep "tarball" | cut -d '"' -f 4) | tar -xz -C WhiteSur-gtk-theme --strip-components=1
        cd WhiteSur-gtk-theme
        rm -rf src/assets/gnome-shell/backgrounds/*
        for target in background-default.png background-darken.png background-blank.png background-blur-darken.png background-blur.png; do
            cp $REPO_DIR/backgrounds/intel-processor.jpg src/assets/gnome-shell/backgrounds/$target
        done
        rm -rf /usr/share/themes/fedora_themes
        gawk -i inplace '!/Yaru/' src/main/gnome-shell/gnome-shell-theme.gresource.xml
        ./install.sh -n 'WoW' -o normal -c dark -a alt -t default -s standard -m -N mojave -HD --round --shell -b default -p 30 -h smaller -normal -sf
        ./tweaks.sh -o solid -c dark -t default -s standard -g -b default -p 30 -h smaller -sf
        cd /usr/share/themes
        fedora_important=$(ls -d /usr/share/themes/WoW-Dark-alt)
        mv $fedora_important /usr/share/themes/fedora_themes
        rm -rf WoW*
        cd fedora_themes
        rm -rf cinnamon plank gnome-shell
        cd "$REPO_DIR" || return
        rm -rf themes_custom
    }

    icons() {
        cd "$REPO_DIR" || return
        mkdir -p icons_custom
        cd icons_custom
        mkdir -p WhiteSur-icon-theme && curl -L $(curl -s https://api.github.com/repos/vinceliuice/WhiteSur-icon-theme/releases/latest | grep "tarball" | cut -d '"' -f 4) | tar -xz -C WhiteSur-icon-theme --strip-components=1
        rm -rf /usr/share/icons/fedora_icons
        cd WhiteSur-icon-theme
        ./install.sh -n 'fedora_icons' -t default -a -b
        cd /usr/share/icons
        rm -rf fedora_icons-{dark,light}
        cd "$REPO_DIR" || return
        rm -rf icons_custom
    }

    cursors() {
        cd "$REPO_DIR" || return
        mkdir -p cursors_custom
        cd cursors_custom
        wget $(curl -s https://api.github.com/repos/ful1e5/apple_cursor/releases/latest | grep "browser_download_url.*macOS.tar.xz" | cut -d '"' -f 4) && tar -xvf macOS.tar.xz
        rm -rf /usr/share/icons/fedora_cursors
        cp -r macOS /usr/share/icons/
        cd /usr/share/icons/
        mv macOS fedora_cursors
        cd "$REPO_DIR" || return
        rm -rf cursors_custom
    }

    fonts() {
        cd "$REPO_DIR" || return
        mkdir -p fonts_custom
        cd fonts_custom
        mkdir -p fira-code-nerd && wget $(curl -s https://api.github.com/repos/ryanoasis/nerd-fonts/releases/latest | grep browser_download_url | grep "FiraCode*.tar.xz" | cut -d '"' -f 4) -O fira-code-nerd.tar.xz && tar -xvf fira-code-nerd.tar.xz -C fira-code-nerd
        cd fira-code-nerd
        mkdir -p /usr/share/fonts/fira-code-nerd-fonts
        cp FiraCodeNerdFontMono-SemiBold.ttf /usr/share/fonts/fira-code-nerd-fonts
        fc-cache -f -v
        dnf group install "fonts" -y
        cd "$REPO_DIR" || return
        # abattis-cantarell-fonts.noarch adobe-source-code-pro-fonts.noarch dejavu-sans-fonts.noarch dejavu-sans-mono-fonts.noarch dejavu-serif-fonts.noarch fontconfig.x86_64 fonts-filesystem.noarch google-droid-sans-fonts.noarch google-noto-fonts-common.noarch google-noto-sans-gurmukhi-fonts.noarch google-noto-sans-sinhala-vf-fonts.noarch jomolhari-fonts.noarch julietaula-montserrat-fonts.noarch khmer-os-system-fonts.noarch libXfont2.x86_64 liberation-fonts-common.noarch liberation-mono-fonts.noarch liberation-sans-fonts.noarch liberation-serif-fonts.noarch libfontenc.x86_64 lohit-assamese-fonts.noarch lohit-bengali-fonts.noarch lohit-devanagari-fonts.noarch lohit-gujarati-fonts.noarch lohit-kannada-fonts.noarch lohit-odia-fonts.noarch lohit-tamil-fonts.noarch lohit-telugu-fonts.noarch paktype-naskh-basic-fonts.noarch pt-sans-fonts.noarch sil-abyssinica-fonts.noarch sil-nuosu-fonts.noarch sil-padauk-fonts.noarch stix-fonts.noarch urw-base35-bookman-fonts.noarch urw-base35-c059-fonts.noarch urw-base35-d050000l-fonts.noarch urw-base35-fonts.noarch urw-base35-fonts-common.noarch urw-base35-gothic-fonts.noarch urw-base35-nimbus-mono-ps-fonts.noarch urw-base35-nimbus-roman-fonts.noarch urw-base35-nimbus-sans-fonts.noarch urw-base35-p052-fonts.noarch urw-base35-standard-symbols-ps-fonts.noarch urw-base35-z003-fonts.noarch google-noto-sans-fonts
        cd $REPO_DIR/
        rm -rf fonts_custom
    }

    gdms() {
        cd "$REPO_DIR" || return

        # if [ -f /home/$user_current/.config/monitors.xml ]; then
        #     cp /home/$user_current/.config/monitors.xml ~gdm/.config/monitors.xml
        #     chown gdm:gdm ~gdm/.config/monitors.xml
        # fi

        # if loginctl show-session $(loginctl list-sessions | grep $user_current | awk '{print $1}') -p Type | grep -q "wayland"; then
        #     sudo -u gdm dbus-launch gsettings set org.gnome.mutter experimental-features "['scale-monitor-framebuffer']"
        # elif loginctl show-session $(loginctl list-sessions | grep $user_current | awk '{print $1}') -p Type | grep -q "x11"; then
        #     sudo -u gdm dbus-launch gsettings set org.gnome.mutter experimental-features "['x11-randr-fractional-scaling']"
        # fi

        settings=(
            "org.gnome.desktop.interface text-scaling-factor 1.25"
            "org.gnome.desktop.interface gtk-theme 'fedora_themes'"
            "org.gnome.desktop.interface icon-theme 'fedora_icons'"
            "org.gnome.desktop.interface cursor-theme 'fedora_cursors'"
            "org.gnome.desktop.interface clock-show-date true"
            "org.gnome.desktop.interface show-battery-percentage true"
            "org.gnome.desktop.interface clock-show-seconds true"
            "org.gnome.desktop.interface clock-show-weekday true"
            "org.gnome.settings-daemon.plugins.power power-button-action 'action'"
            "org.gnome.desktop.peripherals.touchpad tap-to-click true"
            "org.gnome.login-screen disable-user-list true"
            "org.gnome.settings-daemon.plugins.color night-light-enabled true"
            "org.gnome.settings-daemon.plugins.color night-light-temperature 2595"
            "org.gnome.settings-daemon.plugins.color night-light-schedule-from 0.0"
            "org.gnome.settings-daemon.plugins.color night-light-schedule-to 0.0"
            "org.gnome.login-screen banner-message-enable true"
            "org.gnome.login-screen banner-message-text 'Leader_H'"
            "org.gnome.desktop.sound allow-volume-above-100-percent true"
            "org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'"
            "org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'nothing'"
            "org.gnome.settings-daemon.plugins.power idle-dim false"
            "org.gnome.desktop.screensaver lock-delay 0"
            "org.gnome.desktop.screensaver lock-enabled true"
            "org.gnome.desktop.datetime automatic-timezone true"
            "org.gnome.desktop.calendar show-weekdate true"
            "org.gnome.desktop.interface clock-format '24h'"
            "org.gnome.system.location enabled true"
            "org.gnome.desktop.interface color-scheme 'prefer-dark'"
        )
        for setting in "${settings[@]}"; do
            sudo -u gdm dbus-launch gsettings set $setting
        done
        cp $REPO_DIR/gdms/custom.conf /etc/gdm
        cd $REPO_DIR || return
    }

    remove_packages() {
        dnf remove vim-minimal vim-data vim-common vim-enhanced vi sassc glib2-devel ImageMagick dialog inkscape optipng vim-data dbus-x11 -y
        dnf autoremove -y
        dnf install PackageKit-command-not-found gnome-software fuse fuse-libs -y
    }

    mount_windows_partition() {
        local partition_name="Windows_H"
        local mount_point="/Os_H/Windows_H"
        local partition_uuid=$(blkid -o value -s UUID -t LABEL="$partition_name")

        # Check if the partition is already mounted and exit if it is already mounted or if the partition is not found
        if mount | grep -q "$partition_name"; then
            echo "The partition is already mounted."
            return
        fi

        # Check type of the partition is ntfs or ntfs-3g and not encrypted and not mounted then mount it
        if blkid -o value -s TYPE -t LABEL="$partition_name" | grep -q "ntfs"; then
            mkdir -p "$mount_point"
            if ! grep -q "$partition_uuid" /etc/fstab; then
                echo "UUID=$partition_uuid  $mount_point  ntfs-3g  defaults,uid=$(id -u $user_current),gid=$(id -g $user_current),umask=022  0  0" >>/etc/fstab
            fi
            mount -a
        fi
    }

    cursor_editor() {
        cd "$REPO_DIR" || return
        filename=$(curl -OJ -w '%{filename_effective}' https://downloader.cursor.sh/linux/appImage/x64)
        mv $filename /usr/local/bin/cursor
        chmod +x /usr/local/bin/cursor
        mkdir -p /usr/share/icons/cursor_ai
        cp cursor_editor/cursor_ai.svg /usr/share/icons/cursor_ai
        cp cursor_editor/cursor.desktop /usr/share/applications
        cd "$REPO_DIR" || return
    }

    conky_setup() {
        # if [ ! -d /home/$user_current/.config/autostart ]; then
        #     mkdir -p /home/$user_current/.config/autostart
        #     chown -R $user_current:$user_current /home/$user_current/.config/autostart
        # fi
        cd "$REPO_DIR" || return
        cd system/conky_conf/
        rsync -av --exclude={conky.desktop,conky.lua,conkyrc_conf_wayland,conkyrc_conf_xorg} * /Os_H
        # cp conky.desktop /home/$user_current/.config/autostart
        # chown -R $user_current:$user_current /home/$user_current/.config/autostart/conky.desktop
        if loginctl show-session $(loginctl list-sessions | grep $user_current | awk '{print $1}') -p Type | grep -q "wayland"; then
            cp conkyrc_conf_wayland /etc/conky/conky.conf
        elif loginctl show-session $(loginctl list-sessions | grep $user_current | awk '{print $1}') -p Type | grep -q "x11"; then
            cp conkyrc_conf_xorg /etc/conky/conky.conf
        fi
        cd "$REPO_DIR" || return
    }

    service() {
        cd "$REPO_DIR" || return
        rm -rf /etc/systemd/system/cpu_power.service /etc/systemd/system/cpu_voltage.service
        cd system/service
        cp * /etc/systemd/system/
        systemctl enable cpu_power.service
        systemctl enable cpu_voltage.service
        systemctl start cpu_power.service
        systemctl start cpu_voltage.service
        systemctl daemon-reload
        cd "$REPO_DIR" || return
    }

    yubico() {
        cd "$REPO_DIR" || return
        if [ ! -d /Yubico ]; then
            mkdir -p /Yubico
        fi
        cd yubico
        cp yubico_authenticator.desktop /usr/share/applications
        cp yubico_icon.png /Yubico
        rm -rf /Yubico/*
        cd /Yubico
        wget $(curl -s https://api.github.com/repos/Yubico/yubioath-flutter/releases/latest | grep "browser_download_url" | grep "linux" | grep "tar.gz" | cut -d '"' -f 4)
        yubico_compress=$(ls -d *.tar.gz)
        # dir_name=$(basename $yubico_compress .tar.gz)
        tar -xzvf $yubico_compress -C /Yubico --strip-components=1
        rm -rf *.tar.gz *.tar.gz.sig
        cd "$REPO_DIR" || return
    }

    enpass_install() {
        # enpass portable
        # curl -s https://www.enpass.io/downloads/ | grep "stable/portable/linux" | grep "https" | sed -n 's/.*\(https[^"]*\).*/\1/p'
        cd "$REPO_DIR" || return
        cd /etc/yum.repos.d/
        rm -rf enpass-yum.repo
        wget https://yum.enpass.io/enpass-yum.repo
        dnf install enpass -y
    }

    tasks=(
        "system"
        "softwares"
        "bootloader"
        "themes"
        "icons"
        "cursors"
        "fonts"
        "gdms"
        "conky_setup"
        "mount_windows_partition"
        "cursor_editor"
        "service"
        # "yubico"
        # "enpass_install"
        "remove_packages"
    )

    for task in "${tasks[@]}"; do
        check_and_run "$task"
    done
    chmod -R 777 $REPO_DIR/logs
    systemctl restart cpu_power.service &>/dev/null
    systemctl restart cpu_voltage.service &>/dev/null
fi
